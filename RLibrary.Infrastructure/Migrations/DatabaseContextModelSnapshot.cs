// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RLibrary.Infrastructure.Database.Configuration;

namespace RLibrary.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("RLibrary.Application.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2049)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("FileId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<int>("PriceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price_id");

                    b.Property<int>("Quanitity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PriceId")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("book", "dbo");
                });

            modelBuilder.Entity("RLibrary.Application.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("genre", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("RLibrary.Application.Models.Price", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasMaxLength(254)
                        .HasColumnType("REAL")
                        .HasColumnName("amount");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("currency");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("price", "dbo");
                });

            modelBuilder.Entity("RLibrary.Application.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("currency");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("REAL")
                        .HasColumnName("total_price");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("shoppingcart", "dbo");
                });

            modelBuilder.Entity("RLibrary.Application.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("book_id");

                    b.Property<int>("PriceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price_id");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("shopping_cart_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("BookId");

                    b.HasIndex("PriceId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("shoppingcart_item", "dbo");
                });

            modelBuilder.Entity("RLibrary.Application.Models.Book", b =>
                {
                    b.HasOne("RLibrary.Application.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLibrary.Application.Models.Price", "Price")
                        .WithOne("Book")
                        .HasForeignKey("RLibrary.Application.Models.Book", "PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("RLibrary.Application.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("RLibrary.Application.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLibrary.Application.Models.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLibrary.Application.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Price");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("RLibrary.Application.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("RLibrary.Application.Models.Price", b =>
                {
                    b.Navigation("Book");
                });

            modelBuilder.Entity("RLibrary.Application.Models.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
